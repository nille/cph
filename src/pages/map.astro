---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Get all recommendations that have coordinates
const allRecommendations = await getCollection('recommendations');
const mappedRecommendations = allRecommendations.filter(rec => 
  rec.data.coordinates && rec.data.coordinates.lat && rec.data.coordinates.lng
);
---

<BaseLayout title="Map - My Copenhagen" description="Interactive map of all recommended places and events in Copenhagen">
  <div class="max-w-6xl mx-auto px-6 py-16">
    <!-- Header -->
    <div class="text-center mb-16">
      <h1 class="text-4xl font-light text-stone-900 mb-4 font-courgette">Map</h1>
      <p class="text-xl text-stone-600 max-w-2xl mx-auto">
        Explore all recommended places and events across Copenhagen on an interactive map.
      </p>
      <div class="w-16 h-px bg-stone-300 mx-auto mt-6"></div>
    </div>

    <!-- Map Container -->
    <div class="bg-eggshell-50 rounded-lg border border-stone-200 p-4 mb-8">
      <div id="map" class="w-full h-96 rounded-lg"></div>
    </div>

    <!-- Legend -->
    <div class="flex justify-center mb-8">
      <div class="flex space-x-8 text-sm">
        <div class="flex items-center space-x-2">
          <div class="w-4 h-4 bg-sage-500 rounded-full"></div>
          <span class="text-stone-700">Places</span>
        </div>
        <div class="flex items-center space-x-2">
          <div class="w-4 h-4 bg-sky-500 rounded-full"></div>
          <span class="text-stone-700">Events</span>
        </div>
      </div>
    </div>

    <!-- Places List -->
    {mappedRecommendations.length > 0 && (
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
        {mappedRecommendations.map((item) => (
          <div class="bg-eggshell-50 rounded-lg border border-stone-200 p-4 hover:shadow-sm transition-shadow">
            <div class="flex items-start justify-between mb-2">
              <h3 class="font-medium text-stone-900">
                <a href={`/recommendations/${item.slug}`} class="hover:text-stone-600 transition-colors">
                  {item.data.title}
                </a>
              </h3>
              <div class={`w-3 h-3 rounded-full ${item.data.category === 'places' ? 'bg-sage-500' : 'bg-sky-500'}`}></div>
            </div>
            <p class="text-sm text-stone-600 mb-2">{item.data.location}</p>
            {item.data.tags && item.data.tags.length > 0 && (
              <div class="flex flex-wrap gap-1">
                {item.data.tags.slice(0, 2).map((tag: string) => (
                  <span class="px-2 py-1 bg-stone-100 text-stone-600 rounded-full text-xs">
                    {tag}
                  </span>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    )}
  </div>
</BaseLayout>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<script>
  import L from 'https://unpkg.com/leaflet@1.9.4/dist/leaflet-src.esm.js';

  // Initialize map centered on Copenhagen
  const map = L.map('map').setView([55.6761, 12.5683], 12);

  // Add OpenStreetMap tiles
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

  // Get recommendations data from the server-side
  const recommendations = [
    // This will be populated with actual coordinates when you have real data
    // For now, adding some sample markers
  ];

  // Add sample markers (replace with actual data later)
  const samplePlaces = [
    { lat: 55.6761, lng: 12.5683, name: "Copenhagen City Center", category: "places" },
    { lat: 55.6867, lng: 12.5700, name: "Nørrebro", category: "places" },
    { lat: 55.6659, lng: 12.5534, name: "Vesterbro", category: "events" }
  ];

  samplePlaces.forEach(place => {
    const color = place.category === 'places' ? '#4a9b4a' : '#0ea5e9';
    
    const marker = L.circleMarker([place.lat, place.lng], {
      color: color,
      fillColor: color,
      fillOpacity: 0.7,
      radius: 8,
      weight: 2
    }).addTo(map);

    marker.bindPopup(`
      <div class="p-2">
        <h3 class="font-medium text-stone-900 mb-1">${place.name}</h3>
        <p class="text-sm text-stone-600 capitalize">${place.category}</p>
      </div>
    `);
  });
</script>

<style>
  /* Ensure Leaflet map renders properly */
  #map {
    z-index: 1;
  }
</style>