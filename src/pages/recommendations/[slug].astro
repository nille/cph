---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const recommendations = await getCollection('recommendations');
  return recommendations.map((recommendation) => ({
    params: { slug: recommendation.slug },
    props: { recommendation },
  }));
}

type Props = {
  recommendation: CollectionEntry<'recommendations'>;
};

const { recommendation } = Astro.props;
const { Content } = await recommendation.render();
---

<BaseLayout 
  title={`${recommendation.data.title} - My Copenhagen`}
  description={recommendation.data.description}
>
  <div class="max-w-3xl mx-auto px-6 py-16">
    <!-- Back Navigation -->
    <div class="mb-8">
      <a 
        href={recommendation.data.category === 'places' ? '/places' : recommendation.data.category === 'events' ? '/events' : '/tips'}
        class="inline-flex items-center text-stone-600 hover:text-stone-900 transition-colors"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
        Back to {recommendation.data.category === 'places' ? 'Places' : recommendation.data.category === 'events' ? 'Events' : 'Tips & Tricks'}
      </a>
    </div>

    <!-- Header -->
    <header class="mb-12">
      <div class="flex items-center justify-between mb-4">
        <h1 class="text-4xl font-light text-stone-900 font-courgette">
          {recommendation.data.title}
        </h1>
        <div class="flex items-center space-x-1 text-yellow-500">
          {Array.from({ length: recommendation.data.rating }, (_, i) => (
            <svg key={i} class="w-5 h-5 fill-current" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
            </svg>
          ))}
        </div>
      </div>

      <!-- Meta Information -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 py-6 border-y border-stone-200">
        <div>
          <dt class="text-sm font-medium text-stone-500 mb-1">Location</dt>
          <dd class="text-stone-900">{recommendation.data.location}</dd>
        </div>
        
        <div>
          <dt class="text-sm font-medium text-stone-500 mb-1">Type</dt>
          <dd class="text-stone-900 capitalize">{recommendation.data.type}</dd>
        </div>
        
        {recommendation.data.price_range && (
          <div>
            <dt class="text-sm font-medium text-stone-500 mb-1">Price Range</dt>
            <dd class="text-stone-900">{recommendation.data.price_range}</dd>
          </div>
        )}
        
        {recommendation.data.neighborhood && (
          <div>
            <dt class="text-sm font-medium text-stone-500 mb-1">Neighborhood</dt>
            <dd class="text-stone-900">{recommendation.data.neighborhood}</dd>
          </div>
        )}
        
        <div>
          <dt class="text-sm font-medium text-stone-500 mb-1">Last Visited</dt>
          <dd class="text-stone-900">{new Date(recommendation.data.visited).toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}</dd>
        </div>
      </div>

      <!-- Tags -->
      {recommendation.data.tags && recommendation.data.tags.length > 0 && (
        <div class="mt-6">
          <div class="flex flex-wrap gap-2">
            {recommendation.data.tags.map((tag: string) => (
              <span class="px-3 py-1 bg-stone-100 text-stone-700 rounded-md text-sm">
                {tag}
              </span>
            ))}
          </div>
        </div>
      )}
    </header>

    <!-- Content -->
    <article class="prose prose-stone max-w-none prose-headings:font-courgette prose-headings:font-light prose-h1:text-3xl prose-h2:text-2xl prose-h3:text-xl prose-p:leading-relaxed prose-p:text-stone-700">
      <Content />
    </article>
  </div>
</BaseLayout>

<style>
  /* Custom prose styles for better japandi aesthetic */
  .prose h1:first-of-type {
    display: none; /* Hide the first h1 since we show it in the header */
  }
  
  .prose h2 {
    margin-top: 3rem;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid #e7e5e4;
    padding-bottom: 0.5rem;
  }
  
  .prose h3 {
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  .prose p {
    margin-bottom: 1.5rem;
  }
  
  .prose strong {
    font-weight: 500;
    color: #1c1917;
  }
  
  .prose ul, .prose ol {
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .prose li {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }
</style>